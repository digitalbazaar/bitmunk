# This file contains basic Makefile includes that contain all 
# common building instructions for all binaries and packages.

.PHONY: all \
	build-setup build-clean build-directories build-headers build-objects build-libraries build-executables build-xpts build-flash build-min-js build-extra \
	clean clean-objects clean-libraries clean-executables clean-flash clean-min-js clean-xpts clean-extra

all: build-headers build-objects build-libraries build-executables build-flash build-min-js build-xpts build-extra

PLATFORM=@BITMUNK_PLATFORM@
BUILD_FOR_LINUX=@BUILD_FOR_LINUX@
BUILD_FOR_WINDOWS=@BUILD_FOR_WINDOWS@
BUILD_FOR_MACOS=@BUILD_FOR_MACOS@

AR_FLAGS = cr

MONARCH = $(realpath @MONARCH_DIR@)
BITMUNK = $(realpath @BITMUNK_DIR@)
TOP_SRC_DIR = $(BITMUNK)

# config.h generated in setup
INCLUDES += \
	-I$(BITMUNK)/setup \
	-I$(MONARCH)/dist/include \
	-I$(BITMUNK)/dist/include \
	-I$(BITMUNK)/dist/internal/include

CWD = $(shell pwd)
ifndef HEADER_DIST_DIR
HEADER_DIST_DIR = dist/include/bitmunk/$(notdir $(CWD))
endif

# Platform agnostic variables
XPIDL = @XPIDL@
XULRUNNER_IDL_FLAGS = @XULRUNNER_IDL_FLAGS@

.SECONDEXPANSION:

# Variables for all platforms

CXX = @CXX@
CXX_FLAGS += @CXXFLAGS@ @DEFS@ -Wall
LD_FLAGS += @LDFLAGS@
LIBS += -L$(MONARCH)/dist/lib -L$(LIB_DIR)
AR = @AR@
AS = @AS@

# Platform-specific variables

ifeq ($(BUILD_FOR_LINUX),yes)
LIB_PREFIX=lib
DYNAMIC_LIB_EXT=so
STATIC_LIB_EXT=a
EXECUTABLE_EXT=
CXX_FLAGS += -march=i686 -fPIC -DLINUX $(MODULE_CXX_FLAGS) $(MODULE_LINUX_CXX_FLAGS)
LD_FLAGS += -Wl,-rpath=@BITMUNK_MODULES_DIR@
# FIXME: break out vars and include in per-dir Makefiles as needed
INCLUDES += \
	-I$(BITMUNK)/build/apps/firefox/components \
	-I$(BITMUNK)/dist/internal/include \
	@GTK_INCLUDES@
LIBS += -L/usr/lib/mysql @GTK_LIBS@
DYNAMIC_LINK_LIBRARIES += $(DYNAMIC_LINUX_LINK_LIBRARIES)
DYNAMIC_EXECUTABLE_LIBRARIES += $(DYNAMIC_LINUX_EXECUTABLE_LIBRARIES)
endif

ifeq ($(BUILD_FOR_MACOS),yes)
LIB_PREFIX=lib
DYNAMIC_LIB_EXT=dylib
STATIC_LIB_EXT=a
EXECUTABLE_EXT=
# TODO: support build target config and use -march=i686/powerpc/etc
CXX_FLAGS += -fPIC -DMACOS $(MODULE_CXX_FLAGS) $(MODULE_MACOS_CXX_FLAGS)
LIB_LD_FLAGS += \
	-Wl,-dylib_compatibility_version,@FULL_DOTTED_VERSION@ \
	-Wl,-dylib_current_version,@FULL_DOTTED_VERSION@
# Add default location for Fink
INCLUDES += -I/sw/include 
LIBS += -L/sw/lib
DYNAMIC_LINK_LIBRARIES += $(DYNAMIC_MACOS_LINK_LIBRARIES)
DYNAMIC_EXECUTABLE_LIBRARIES += $(DYNAMIC_MACOS_EXECUTABLE_LIBRARIES)
endif

ifeq ($(BUILD_FOR_WINDOWS),yes)
LIB_PREFIX=
DYNAMIC_LIB_EXT=dll
STATIC_LIB_EXT=lib
EXECUTABLE_EXT=.exe
CXX_FLAGS += -march=i686 -D_WIN32_WINNT=0x0501 $(MODULE_CXX_FLAGS)
LD_FLAGS += -Wl,--enable-auto-import
INCLUDES += \
	-I$(MONARCH)/cpp/3rdparty/pthread/include \
	-I$(MONARCH)/cpp/3rdparty/openssl/include \
	-I$(MONARCH)/cpp/3rdparty/expat/include \
	-I$(MONARCH)/cpp/3rdparty/mysql/include \
	-I$(MONARCH)/cpp/3rdparty/regex/include \
	-I$(MONARCH)/cpp/3rdparty/sqlite3/include \
	-I$(MONARCH)/cpp/3rdparty/zlib/include \
	-I$(MONARCH)/cpp/3rdparty/iconv/include
DYNAMIC_LINK_LIBRARIES += $(DYNAMIC_WINDOWS_LINK_LIBRARIES)
DYNAMIC_EXECUTABLE_LIBRARIES += $(DYNAMIC_WINDOWS_EXECUTABLE_LIBRARIES)
endif

# Platform-agnostic build rules 
include $(MONARCH)/setup/baserules.mk
include $(BITMUNK)/setup/bitmunk.mk

build-setup:

build-clean:

$(ALL_DIRECTORIES):
	mkdir -p $@

clean: build-clean clean-objects clean-libraries clean-executables clean-flash clean-min-js clean-xpts clean-extra

build-headers: $(ALL_HEADERS)

build-objects: $(ALL_DIRECTORIES) $(ALL_SOURCES) $(ALL_OBJECTS)

build-libraries: $(ALL_DIRECTORIES) $(ALL_LIBRARIES)

build-executables: $(ALL_DIRECTORIES) $(ALL_EXECUTABLES)

build-flash: $(ALL_DIRECTORIES) $(ALL_FLASH)

build-min-js: $(ALL_DIRECTORIES) $(ALL_MIN_JS)

build-xpts: $(ALL_DIRECTORIES) $(ALL_XPTS)

build-extra: $(ALL_DIRECTORIES) $(ALL_EXTRA)

clean-executables:
	$(PCMD) rm -rf $(ALL_EXECUTABLES)

clean-flash:
	$(PCMD) rm -rf $(ALL_FLASH)

clean-min-js:
	$(PCMD) rm -rf $(ALL_MIN_JS)

clean-xpts:
	$(PCMD) rm -rf $(ALL_GENERATED_HEADERS) $(ALL_XPTS)

clean-extra:
	$(PCMD) rm -rf $(ALL_EXTRA)
